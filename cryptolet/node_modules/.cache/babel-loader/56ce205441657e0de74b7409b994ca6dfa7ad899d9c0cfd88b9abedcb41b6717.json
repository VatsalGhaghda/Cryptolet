{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Desktop\\\\PEDALS  UP\\\\Cryptolet\\\\cryptolet\\\\src\\\\components\\\\CreateAccount.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Button, Card, Input } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CreateAccount({\n  setWallet,\n  setSeedPhrase\n}) {\n  _s();\n  const [newSeedPhrase, setNewSeedPhrase] = useState(null);\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showSeedPhrase, setShowSeedPhrase] = useState(false);\n  const navigate = useNavigate();\n  function generateWallet() {\n    if (!password || !confirmPassword) {\n      toast.error(\"Please enter and confirm your password\");\n      return;\n    }\n    if (password !== confirmPassword) {\n      toast.error(\"Passwords don't match!\");\n      return;\n    }\n    if (password.length < 8) {\n      toast.error(\"Password must be at least 8 characters!\");\n      return;\n    }\n    const mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\n    setNewSeedPhrase(mnemonic);\n    setShowSeedPhrase(true);\n  }\n  function setWalletAndMnemonic() {\n    if (!newSeedPhrase) return;\n\n    // Store wallet data with password\n    const hashedPassword = btoa(password); // Simple hash for demo\n    localStorage.setItem(\"walletData\", JSON.stringify({\n      seedPhrase: newSeedPhrase,\n      wallet: ethers.Wallet.fromPhrase(newSeedPhrase).address,\n      hashedPassword\n    }));\n    setSeedPhrase(newSeedPhrase);\n    setWallet(ethers.Wallet.fromPhrase(newSeedPhrase).address);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mnemonic\",\n        children: [/*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {\n          style: {\n            fontSize: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Create a password to secure your wallet. Save your seed phrase securely to recover your wallet if you forget your password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), !showSeedPhrase ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Input.Password, {\n          placeholder: \"Create password (min 8 characters)\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          style: {\n            width: \"90%\",\n            marginBottom: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input.Password, {\n          placeholder: \"Confirm password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value),\n          style: {\n            width: \"90%\",\n            marginBottom: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"frontPageButton\",\n          type: \"primary\",\n          onClick: () => generateWallet(),\n          children: \"Create Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          className: \"seedPhraseContainer\",\n          children: newSeedPhrase && /*#__PURE__*/_jsxDEV(\"pre\", {\n            style: {\n              whiteSpace: \"pre-wrap\"\n            },\n            children: newSeedPhrase\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"frontPageButton\",\n          type: \"default\",\n          onClick: () => setWalletAndMnemonic(),\n          children: \"Open Your New Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"frontPageBottom\",\n        onClick: () => navigate(\"/\"),\n        children: \"Back Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(CreateAccount, \"uXycDkWbZXKJwN+e8gg5g5Axd3s=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateAccount;\nexport default CreateAccount;\nvar _c;\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"names":["React","Button","Card","Input","ExclamationCircleOutlined","useNavigate","useState","ethers","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateAccount","setWallet","setSeedPhrase","_s","newSeedPhrase","setNewSeedPhrase","password","setPassword","confirmPassword","setConfirmPassword","showSeedPhrase","setShowSeedPhrase","navigate","generateWallet","error","length","mnemonic","Wallet","createRandom","phrase","setWalletAndMnemonic","hashedPassword","btoa","localStorage","setItem","JSON","stringify","seedPhrase","wallet","fromPhrase","address","children","className","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","Password","placeholder","value","onChange","e","target","width","marginBottom","type","onClick","whiteSpace","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Desktop/PEDALS  UP/Cryptolet/cryptolet/src/components/CreateAccount.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button, Card, Input } from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction CreateAccount({setWallet, setSeedPhrase}) {\r\n  const [newSeedPhrase, setNewSeedPhrase] = useState(null);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [showSeedPhrase, setShowSeedPhrase] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  function generateWallet(){\r\n    if (!password || !confirmPassword) {\r\n      toast.error(\"Please enter and confirm your password\");\r\n      return;\r\n    }\r\n    if (password !== confirmPassword) {\r\n      toast.error(\"Passwords don't match!\");\r\n      return;\r\n    }\r\n    if (password.length < 8) {\r\n      toast.error(\"Password must be at least 8 characters!\");\r\n      return;\r\n    }\r\n\r\n    const mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\r\n    setNewSeedPhrase(mnemonic);\r\n    setShowSeedPhrase(true);\r\n  }\r\n\r\n  function setWalletAndMnemonic(){\r\n    if (!newSeedPhrase) return;\r\n\r\n    // Store wallet data with password\r\n    const hashedPassword = btoa(password); // Simple hash for demo\r\n    localStorage.setItem(\r\n      \"walletData\",\r\n      JSON.stringify({\r\n        seedPhrase: newSeedPhrase,\r\n        wallet: ethers.Wallet.fromPhrase(newSeedPhrase).address,\r\n        hashedPassword\r\n      })\r\n    );\r\n\r\n    setSeedPhrase(newSeedPhrase);\r\n    setWallet(ethers.Wallet.fromPhrase(newSeedPhrase).address);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content\">\r\n        <div className=\"mnemonic\">\r\n          <ExclamationCircleOutlined style={{ fontSize: \"20px\" }} />\r\n          <div>\r\n            Create a password to secure your wallet. Save your seed phrase securely to recover your wallet if you forget your password.\r\n          </div>\r\n        </div>\r\n\r\n        {!showSeedPhrase ? (\r\n          <>\r\n            <Input.Password\r\n              placeholder=\"Create password (min 8 characters)\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              style={{ width: \"90%\", marginBottom: \"20px\" }}\r\n            />\r\n            <Input.Password\r\n              placeholder=\"Confirm password\"\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n              style={{ width: \"90%\", marginBottom: \"20px\" }}\r\n            />\r\n            <Button\r\n              className=\"frontPageButton\"\r\n              type=\"primary\"\r\n              onClick={() => generateWallet()}\r\n            >\r\n              Create Wallet\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Card className=\"seedPhraseContainer\">\r\n              {newSeedPhrase && <pre style={{whiteSpace: \"pre-wrap\"}}>{newSeedPhrase}</pre>}\r\n            </Card>\r\n            <Button\r\n              className=\"frontPageButton\"\r\n              type=\"default\"\r\n              onClick={() => setWalletAndMnemonic()}\r\n            >\r\n              Open Your New Wallet\r\n            </Button>\r\n          </>\r\n        )}\r\n        \r\n        <p className=\"frontPageBottom\" onClick={()=>navigate(\"/\")}>\r\n          Back Home\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateAccount;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}