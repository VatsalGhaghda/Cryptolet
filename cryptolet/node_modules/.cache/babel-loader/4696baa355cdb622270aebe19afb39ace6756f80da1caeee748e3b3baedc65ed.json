{"ast":null,"code":"import React from\"react\";import{Button,Card,Input}from\"antd\";import{ExclamationCircleOutlined}from\"@ant-design/icons\";import{useNavigate}from\"react-router-dom\";import{useState}from\"react\";import{ethers}from\"ethers\";import{toast}from'react-toastify';import{encryptData}from'../utils/passwordManager';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function CreateAccount(_ref){let{setWallet,setSeedPhrase}=_ref;const[newSeedPhrase,setNewSeedPhrase]=useState(null);const[password,setPassword]=useState(\"\");const[confirmPassword,setConfirmPassword]=useState(\"\");const[showSeedPhrase,setShowSeedPhrase]=useState(false);const navigate=useNavigate();function generateWallet(){if(!password||!confirmPassword){toast.error(\"Please enter and confirm your password\");return;}if(password!==confirmPassword){toast.error(\"Passwords don't match!\");return;}if(password.length<8){toast.error(\"Password must be at least 8 characters!\");return;}const mnemonic=ethers.Wallet.createRandom().mnemonic.phrase;setNewSeedPhrase(mnemonic);setShowSeedPhrase(true);}function setWalletAndMnemonic(){if(!newSeedPhrase)return;const walletData={seedPhrase:newSeedPhrase,wallet:ethers.Wallet.fromPhrase(newSeedPhrase).address,hashedPassword:btoa(password)};try{// Encrypt the wallet data\nconst encryptedData=encryptData(walletData,password);localStorage.setItem('encryptedWalletData',encryptedData);setSeedPhrase(newSeedPhrase);setWallet(ethers.Wallet.fromPhrase(newSeedPhrase).address);toast.success(\"Wallet created successfully!\");navigate(\"/yourwallet\");// Navigate to WalletView\n}catch(error){toast.error(\"Error creating wallet. Please try again.\");console.error(\"Wallet creation error:\",error);}}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mnemonic\",children:[/*#__PURE__*/_jsx(ExclamationCircleOutlined,{style:{fontSize:\"20px\"}}),/*#__PURE__*/_jsx(\"div\",{children:\"Create a password to secure your wallet. Save your seed phrase securely to recover your wallet if you forget your password.\"})]}),!showSeedPhrase?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Input.Password,{placeholder:\"Create password (min 8 characters)\",value:password,onChange:e=>setPassword(e.target.value),style:{width:\"90%\",marginBottom:\"20px\"}}),/*#__PURE__*/_jsx(Input.Password,{placeholder:\"Confirm password\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),style:{width:\"90%\",marginBottom:\"20px\"}}),/*#__PURE__*/_jsx(Button,{className:\"frontPageButton\",type:\"primary\",onClick:()=>generateWallet(),children:\"Create Wallet\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Card,{className:\"seedPhraseContainer\",children:newSeedPhrase&&/*#__PURE__*/_jsx(\"pre\",{style:{whiteSpace:\"pre-wrap\"},children:newSeedPhrase})}),/*#__PURE__*/_jsx(Button,{className:\"frontPageButton\",type:\"default\",onClick:()=>setWalletAndMnemonic(),children:\"Open Your New Wallet\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"frontPageBottom\",onClick:()=>navigate(\"/\"),children:\"Back Home\"})]})});}export default CreateAccount;","map":{"version":3,"names":["React","Button","Card","Input","ExclamationCircleOutlined","useNavigate","useState","ethers","toast","encryptData","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CreateAccount","_ref","setWallet","setSeedPhrase","newSeedPhrase","setNewSeedPhrase","password","setPassword","confirmPassword","setConfirmPassword","showSeedPhrase","setShowSeedPhrase","navigate","generateWallet","error","length","mnemonic","Wallet","createRandom","phrase","setWalletAndMnemonic","walletData","seedPhrase","wallet","fromPhrase","address","hashedPassword","btoa","encryptedData","localStorage","setItem","success","console","children","className","style","fontSize","Password","placeholder","value","onChange","e","target","width","marginBottom","type","onClick","whiteSpace"],"sources":["C:/Users/ASUS/OneDrive/Desktop/PEDALS  UP/Cryptolet/cryptolet/src/components/CreateAccount.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button, Card, Input } from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { toast } from 'react-toastify';\r\nimport { encryptData } from '../utils/passwordManager';\r\n\r\nfunction CreateAccount({ setWallet, setSeedPhrase }) {\r\n  const [newSeedPhrase, setNewSeedPhrase] = useState(null);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [showSeedPhrase, setShowSeedPhrase] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  function generateWallet() {\r\n    if (!password || !confirmPassword) {\r\n      toast.error(\"Please enter and confirm your password\");\r\n      return;\r\n    }\r\n    if (password !== confirmPassword) {\r\n      toast.error(\"Passwords don't match!\");\r\n      return;\r\n    }\r\n    if (password.length < 8) {\r\n      toast.error(\"Password must be at least 8 characters!\");\r\n      return;\r\n    }\r\n\r\n    const mnemonic = ethers.Wallet.createRandom().mnemonic.phrase;\r\n    setNewSeedPhrase(mnemonic);\r\n    setShowSeedPhrase(true);\r\n  }\r\n\r\n  function setWalletAndMnemonic() {\r\n    if (!newSeedPhrase) return;\r\n\r\n    const walletData = {\r\n      seedPhrase: newSeedPhrase,\r\n      wallet: ethers.Wallet.fromPhrase(newSeedPhrase).address,\r\n      hashedPassword: btoa(password)\r\n    };\r\n\r\n    try {\r\n      // Encrypt the wallet data\r\n      const encryptedData = encryptData(walletData, password);\r\n      localStorage.setItem('encryptedWalletData', encryptedData);\r\n\r\n      setSeedPhrase(newSeedPhrase);\r\n      setWallet(ethers.Wallet.fromPhrase(newSeedPhrase).address);\r\n\r\n      toast.success(\"Wallet created successfully!\");\r\n      navigate(\"/yourwallet\"); // Navigate to WalletView\r\n    } catch (error) {\r\n      toast.error(\"Error creating wallet. Please try again.\");\r\n      console.error(\"Wallet creation error:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content\">\r\n        <div className=\"mnemonic\">\r\n          <ExclamationCircleOutlined style={{ fontSize: \"20px\" }} />\r\n          <div>\r\n            Create a password to secure your wallet. Save your seed phrase securely to recover your wallet if you forget your password.\r\n          </div>\r\n        </div>\r\n\r\n        {!showSeedPhrase ? (\r\n          <>\r\n            <Input.Password\r\n              placeholder=\"Create password (min 8 characters)\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              style={{ width: \"90%\", marginBottom: \"20px\" }}\r\n            />\r\n            <Input.Password\r\n              placeholder=\"Confirm password\"\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n              style={{ width: \"90%\", marginBottom: \"20px\" }}\r\n            />\r\n            <Button\r\n              className=\"frontPageButton\"\r\n              type=\"primary\"\r\n              onClick={() => generateWallet()}\r\n            >\r\n              Create Wallet\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Card className=\"seedPhraseContainer\">\r\n              {newSeedPhrase && <pre style={{ whiteSpace: \"pre-wrap\" }}>{newSeedPhrase}</pre>}\r\n            </Card>\r\n            <Button\r\n              className=\"frontPageButton\"\r\n              type=\"default\"\r\n              onClick={() => setWalletAndMnemonic()}\r\n            >\r\n              Open Your New Wallet\r\n            </Button>\r\n          </>\r\n        )}\r\n\r\n        <p className=\"frontPageBottom\" onClick={() => navigate(\"/\")}>\r\n          Back Home\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateAccount;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}