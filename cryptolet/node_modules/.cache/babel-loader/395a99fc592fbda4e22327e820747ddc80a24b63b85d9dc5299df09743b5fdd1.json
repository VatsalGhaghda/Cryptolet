{"ast":null,"code":"/**\r\n *  A fragment is a single item from an ABI, which may represent any of:\r\n *\r\n *  - [Functions](FunctionFragment)\r\n *  - [Events](EventFragment)\r\n *  - [Constructors](ConstructorFragment)\r\n *  - Custom [Errors](ErrorFragment)\r\n *  - [Fallback or Receive](FallbackFragment) functions\r\n *\r\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\r\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n  const result = new Set();\n  items.forEach(k => result.add(k));\n  return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n  \"(\": \"OPEN_PAREN\",\n  \")\": \"CLOSE_PAREN\",\n  \"[\": \"OPEN_BRACKET\",\n  \"]\": \"CLOSE_BRACKET\",\n  \",\": \"COMMA\",\n  \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n  #offset;\n  #tokens;\n  get offset() {\n    return this.#offset;\n  }\n  get length() {\n    return this.#tokens.length - this.#offset;\n  }\n  constructor(tokens) {\n    this.#offset = 0;\n    this.#tokens = tokens.slice();\n  }\n  clone() {\n    return new TokenString(this.#tokens);\n  }\n  reset() {\n    this.#offset = 0;\n  }\n  #subTokenString() {\n    let from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return new TokenString(this.#tokens.slice(from, to).map(t => {\n      return Object.freeze(Object.assign({}, t, {\n        match: t.match - from,\n        linkBack: t.linkBack - from,\n        linkNext: t.linkNext - from\n      }));\n    }));\n  }\n  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n  popKeyword(allowed) {\n    const top = this.peek();\n    if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n      throw new Error(`expected keyword ${top.text}`);\n    }\n    return this.pop().text;\n  }\n  // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n  popType(type) {\n    if (this.peek().type !== type) {\n      const top = this.peek();\n      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\n    }\n    return this.pop().text;\n  }\n  // Pops and returns a \"(\" TOKENS \")\"\n  popParen() {\n    const top = this.peek();\n    if (top.type !== \"OPEN_PAREN\") {\n      throw new Error(\"bad start\");\n    }\n    const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n    this.#offset = top.match + 1;\n    return result;\n  }\n  // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n  popParams() {\n    const top = this.peek();\n    if (top.type !== \"OPEN_PAREN\") {\n      throw new Error(\"bad start\");\n    }\n    const result = [];\n    while (this.#offset < top.match - 1) {\n      const link = this.peek().linkNext;\n      result.push(this.#subTokenString(this.#offset + 1, link));\n      this.#offset = link;\n    }\n    this.#offset = top.match + 1;\n    return result;\n  }\n  // Returns the top Token, throwing if out of tokens\n  peek() {\n    if (this.#offset >= this.#tokens.length) {\n      throw new Error(\"out-of-bounds\");\n    }\n    return this.#tokens[this.#offset];\n  }\n  // Returns the next value, if it is a keyword in `allowed`\n  peekKeyword(allowed) {\n    const top = this.peekType(\"KEYWORD\");\n    return top != null && allowed.has(top) ? top : null;\n  }\n  // Returns the value of the next token if it is `type`\n  peekType(type) {\n    if (this.length === 0) {\n      return null;\n    }\n    const top = this.peek();\n    return top.type === type ? top.text : null;\n  }\n  // Returns the next token; throws if out of tokens\n  pop() {\n    const result = this.peek();\n    this.#offset++;\n    return result;\n  }\n  toString() {\n    const tokens = [];\n    for (let i = this.#offset; i < this.#tokens.length; i++) {\n      const token = this.#tokens[i];\n      tokens.push(`${token.type}:${token.text}`);\n    }\n    return `<TokenString ${tokens.join(\" \")}>`;\n  }\n}\nfunction lex(text) {\n  const tokens = [];\n  const throwError = message => {\n    const token = offset < text.length ? JSON.stringify(text[offset]) : \"$EOI\";\n    throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n  };\n  let brackets = [];\n  let commas = [];\n  let offset = 0;\n  while (offset < text.length) {\n    // Strip off any leading whitespace\n    let cur = text.substring(offset);\n    let match = cur.match(regexWhitespacePrefix);\n    if (match) {\n      offset += match[1].length;\n      cur = text.substring(offset);\n    }\n    const token = {\n      depth: brackets.length,\n      linkBack: -1,\n      linkNext: -1,\n      match: -1,\n      type: \"\",\n      text: \"\",\n      offset,\n      value: -1\n    };\n    tokens.push(token);\n    let type = SimpleTokens[cur[0]] || \"\";\n    if (type) {\n      token.type = type;\n      token.text = cur[0];\n      offset++;\n      if (type === \"OPEN_PAREN\") {\n        brackets.push(tokens.length - 1);\n        commas.push(tokens.length - 1);\n      } else if (type == \"CLOSE_PAREN\") {\n        if (brackets.length === 0) {\n          throwError(\"no matching open bracket\");\n        }\n        token.match = brackets.pop();\n        tokens[token.match].match = tokens.length - 1;\n        token.depth--;\n        token.linkBack = commas.pop();\n        tokens[token.linkBack].linkNext = tokens.length - 1;\n      } else if (type === \"COMMA\") {\n        token.linkBack = commas.pop();\n        tokens[token.linkBack].linkNext = tokens.length - 1;\n        commas.push(tokens.length - 1);\n      } else if (type === \"OPEN_BRACKET\") {\n        token.type = \"BRACKET\";\n      } else if (type === \"CLOSE_BRACKET\") {\n        // Remove the CLOSE_BRACKET\n        let suffix = tokens.pop().text;\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n          const value = tokens.pop().text;\n          suffix = value + suffix;\n          tokens[tokens.length - 1].value = getNumber(value);\n        }\n        if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n          throw new Error(\"missing opening bracket\");\n        }\n        tokens[tokens.length - 1].text += suffix;\n      }\n      continue;\n    }\n    match = cur.match(regexIdPrefix);\n    if (match) {\n      token.text = match[1];\n      offset += token.text.length;\n      if (Keywords.has(token.text)) {\n        token.type = \"KEYWORD\";\n        continue;\n      }\n      if (token.text.match(regexType)) {\n        token.type = \"TYPE\";\n        continue;\n      }\n      token.type = \"ID\";\n      continue;\n    }\n    match = cur.match(regexNumberPrefix);\n    if (match) {\n      token.text = match[1];\n      token.type = \"NUMBER\";\n      offset += token.text.length;\n      continue;\n    }\n    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n  }\n  return new TokenString(tokens.map(t => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n  let included = [];\n  for (const key in allowed.keys()) {\n    if (set.has(key)) {\n      included.push(key);\n    }\n  }\n  if (included.length > 1) {\n    throw new Error(`conflicting types: ${included.join(\", \")}`);\n  }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n  if (tokens.peekKeyword(KwTypes)) {\n    const keyword = tokens.pop().text;\n    if (keyword !== type) {\n      throw new Error(`expected ${type}, got ${keyword}`);\n    }\n  }\n  return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n  const keywords = new Set();\n  while (true) {\n    const keyword = tokens.peekType(\"KEYWORD\");\n    if (keyword == null || allowed && !allowed.has(keyword)) {\n      break;\n    }\n    tokens.pop();\n    if (keywords.has(keyword)) {\n      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n    }\n    keywords.add(keyword);\n  }\n  return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n  let modifiers = consumeKeywords(tokens, KwVisib);\n  // Detect conflicting modifiers\n  allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n  allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n  // Process mutability states\n  if (modifiers.has(\"view\")) {\n    return \"view\";\n  }\n  if (modifiers.has(\"pure\")) {\n    return \"pure\";\n  }\n  if (modifiers.has(\"payable\")) {\n    return \"payable\";\n  }\n  if (modifiers.has(\"nonpayable\")) {\n    return \"nonpayable\";\n  }\n  // Process legacy `constant` last\n  if (modifiers.has(\"constant\")) {\n    return \"view\";\n  }\n  return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n  return tokens.popParams().map(t => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n  if (tokens.peekType(\"AT\")) {\n    tokens.pop();\n    if (tokens.peekType(\"NUMBER\")) {\n      return getBigInt(tokens.pop().text);\n    }\n    throw new Error(\"invalid gas\");\n  }\n  return null;\n}\nfunction consumeEoi(tokens) {\n  if (tokens.length) {\n    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\n  }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n  const match = type.match(regexType);\n  assertArgument(match, \"invalid type\", \"type\", type);\n  if (type === \"uint\") {\n    return \"uint256\";\n  }\n  if (type === \"int\") {\n    return \"int256\";\n  }\n  if (match[2]) {\n    // bytesXX\n    const length = parseInt(match[2]);\n    assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n  } else if (match[3]) {\n    // intXX or uintXX\n    const size = parseInt(match[3]);\n    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, \"invalid numeric width\", \"type\", type);\n  }\n  return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\r\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\r\n */\nexport class ParamType {\n  /**\r\n   *  The local name of the parameter (or ``\"\"`` if unbound)\r\n   */\n  name;\n  /**\r\n   *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\r\n   *  ``\"uint256[3][]\"``)\r\n   */\n  type;\n  /**\r\n   *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\r\n   */\n  baseType;\n  /**\r\n   *  True if the parameters is indexed.\r\n   *\r\n   *  For non-indexable types this is ``null``.\r\n   */\n  indexed;\n  /**\r\n   *  The components for the tuple.\r\n   *\r\n   *  For non-tuple types this is ``null``.\r\n   */\n  components;\n  /**\r\n   *  The array length, or ``-1`` for dynamic-lengthed arrays.\r\n   *\r\n   *  For non-array types this is ``null``.\r\n   */\n  arrayLength;\n  /**\r\n   *  The type of each child in the array.\r\n   *\r\n   *  For non-array types this is ``null``.\r\n   */\n  arrayChildren;\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n    assertPrivate(guard, _guard, \"ParamType\");\n    Object.defineProperty(this, internal, {\n      value: ParamTypeInternal\n    });\n    if (components) {\n      components = Object.freeze(components.slice());\n    }\n    if (baseType === \"array\") {\n      if (arrayLength == null || arrayChildren == null) {\n        throw new Error(\"\");\n      }\n    } else if (arrayLength != null || arrayChildren != null) {\n      throw new Error(\"\");\n    }\n    if (baseType === \"tuple\") {\n      if (components == null) {\n        throw new Error(\"\");\n      }\n    } else if (components != null) {\n      throw new Error(\"\");\n    }\n    defineProperties(this, {\n      name,\n      type,\n      baseType,\n      indexed,\n      components,\n      arrayLength,\n      arrayChildren\n    });\n  }\n  /**\r\n   *  Return a string representation of this type.\r\n   *\r\n   *  For example,\r\n   *\r\n   *  ``sighash\" => \"(uint256,address)\"``\r\n   *\r\n   *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\r\n   *\r\n   *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\r\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      const name = this.name || \"\";\n      if (this.isArray()) {\n        const result = JSON.parse(this.arrayChildren.format(\"json\"));\n        result.name = name;\n        result.type += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n        return JSON.stringify(result);\n      }\n      const result = {\n        type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n        name\n      };\n      if (typeof this.indexed === \"boolean\") {\n        result.indexed = this.indexed;\n      }\n      if (this.isTuple()) {\n        result.components = this.components.map(c => JSON.parse(c.format(format)));\n      }\n      return JSON.stringify(result);\n    }\n    let result = \"\";\n    // Array\n    if (this.isArray()) {\n      result += this.arrayChildren.format(format);\n      result += `[${this.arrayLength < 0 ? \"\" : String(this.arrayLength)}]`;\n    } else {\n      if (this.isTuple()) {\n        result += \"(\" + this.components.map(comp => comp.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n      } else {\n        result += this.type;\n      }\n    }\n    if (format !== \"sighash\") {\n      if (this.indexed === true) {\n        result += \" indexed\";\n      }\n      if (format === \"full\" && this.name) {\n        result += \" \" + this.name;\n      }\n    }\n    return result;\n  }\n  /**\r\n   *  Returns true if %%this%% is an Array type.\r\n   *\r\n   *  This provides a type gaurd ensuring that [[arrayChildren]]\r\n   *  and [[arrayLength]] are non-null.\r\n   */\n  isArray() {\n    return this.baseType === \"array\";\n  }\n  /**\r\n   *  Returns true if %%this%% is a Tuple type.\r\n   *\r\n   *  This provides a type gaurd ensuring that [[components]]\r\n   *  is non-null.\r\n   */\n  isTuple() {\n    return this.baseType === \"tuple\";\n  }\n  /**\r\n   *  Returns true if %%this%% is an Indexable type.\r\n   *\r\n   *  This provides a type gaurd ensuring that [[indexed]]\r\n   *  is non-null.\r\n   */\n  isIndexable() {\n    return this.indexed != null;\n  }\n  /**\r\n   *  Walks the **ParamType** with %%value%%, calling %%process%%\r\n   *  on each type, destructing the %%value%% recursively.\r\n   */\n  walk(value, process) {\n    if (this.isArray()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid array value\");\n      }\n      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n        throw new Error(\"array is wrong length\");\n      }\n      const _this = this;\n      return value.map(v => _this.arrayChildren.walk(v, process));\n    }\n    if (this.isTuple()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid tuple value\");\n      }\n      if (value.length !== this.components.length) {\n        throw new Error(\"array is wrong length\");\n      }\n      const _this = this;\n      return value.map((v, i) => _this.components[i].walk(v, process));\n    }\n    return process(this.type, value);\n  }\n  #walkAsync(promises, value, process, setValue) {\n    if (this.isArray()) {\n      if (!Array.isArray(value)) {\n        throw new Error(\"invalid array value\");\n      }\n      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n        throw new Error(\"array is wrong length\");\n      }\n      const childType = this.arrayChildren;\n      const result = value.slice();\n      result.forEach((value, index) => {\n        childType.#walkAsync(promises, value, process, value => {\n          result[index] = value;\n        });\n      });\n      setValue(result);\n      return;\n    }\n    if (this.isTuple()) {\n      const components = this.components;\n      // Convert the object into an array\n      let result;\n      if (Array.isArray(value)) {\n        result = value.slice();\n      } else {\n        if (value == null || typeof value !== \"object\") {\n          throw new Error(\"invalid tuple value\");\n        }\n        result = components.map(param => {\n          if (!param.name) {\n            throw new Error(\"cannot use object value with unnamed components\");\n          }\n          if (!(param.name in value)) {\n            throw new Error(`missing value for component ${param.name}`);\n          }\n          return value[param.name];\n        });\n      }\n      if (result.length !== this.components.length) {\n        throw new Error(\"array is wrong length\");\n      }\n      result.forEach((value, index) => {\n        components[index].#walkAsync(promises, value, process, value => {\n          result[index] = value;\n        });\n      });\n      setValue(result);\n      return;\n    }\n    const result = process(this.type, value);\n    if (result.then) {\n      promises.push(async function () {\n        setValue(await result);\n      }());\n    } else {\n      setValue(result);\n    }\n  }\n  /**\r\n   *  Walks the **ParamType** with %%value%%, asynchronously calling\r\n   *  %%process%% on each type, destructing the %%value%% recursively.\r\n   *\r\n   *  This can be used to resolve ENS names by walking and resolving each\r\n   *  ``\"address\"`` type.\r\n   */\n  async walkAsync(value, process) {\n    const promises = [];\n    const result = [value];\n    this.#walkAsync(promises, value, process, value => {\n      result[0] = value;\n    });\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    return result[0];\n  }\n  /**\r\n   *  Creates a new **ParamType** for %%obj%%.\r\n   *\r\n   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\r\n   *  otherwise the ``indexed`` keyword will throw an error.\r\n   */\n  static from(obj, allowIndexed) {\n    if (ParamType.isParamType(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return ParamType.from(lex(obj), allowIndexed);\n      } catch (error) {\n        assertArgument(false, \"invalid param type\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      let type = \"\",\n        baseType = \"\";\n      let comps = null;\n      if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n        // Tuple\n        baseType = \"tuple\";\n        comps = obj.popParams().map(t => ParamType.from(t));\n        type = `tuple(${comps.map(c => c.format()).join(\",\")})`;\n      } else {\n        // Normal\n        type = verifyBasicType(obj.popType(\"TYPE\"));\n        baseType = type;\n      }\n      // Check for Array\n      let arrayChildren = null;\n      let arrayLength = null;\n      while (obj.length && obj.peekType(\"BRACKET\")) {\n        const bracket = obj.pop(); //arrays[i];\n        arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n        arrayLength = bracket.value;\n        type += bracket.text;\n        baseType = \"array\";\n        comps = null;\n      }\n      let indexed = null;\n      const keywords = consumeKeywords(obj, KwModifiers);\n      if (keywords.has(\"indexed\")) {\n        if (!allowIndexed) {\n          throw new Error(\"\");\n        }\n        indexed = true;\n      }\n      const name = obj.peekType(\"ID\") ? obj.pop().text : \"\";\n      if (obj.length) {\n        throw new Error(\"leftover tokens\");\n      }\n      return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n    }\n    const name = obj.name;\n    assertArgument(!name || typeof name === \"string\" && name.match(regexId), \"invalid name\", \"obj.name\", name);\n    let indexed = obj.indexed;\n    if (indexed != null) {\n      assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n      indexed = !!indexed;\n    }\n    let type = obj.type;\n    let arrayMatch = type.match(regexArrayType);\n    if (arrayMatch) {\n      const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n      const arrayChildren = ParamType.from({\n        type: arrayMatch[1],\n        components: obj.components\n      });\n      return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n    }\n    if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n      const comps = obj.components != null ? obj.components.map(c => ParamType.from(c)) : null;\n      const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n      // @TODO: use lexer to validate and normalize type\n      return tuple;\n    }\n    type = verifyBasicType(obj.type);\n    return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n  }\n  /**\r\n   *  Returns true if %%value%% is a **ParamType**.\r\n   */\n  static isParamType(value) {\n    return value && value[internal] === ParamTypeInternal;\n  }\n}\n/**\r\n *  An abstract class to represent An individual fragment from a parse ABI.\r\n */\nexport class Fragment {\n  /**\r\n   *  The type of the fragment.\r\n   */\n  type;\n  /**\r\n   *  The inputs for the fragment.\r\n   */\n  inputs;\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, type, inputs) {\n    assertPrivate(guard, _guard, \"Fragment\");\n    inputs = Object.freeze(inputs.slice());\n    defineProperties(this, {\n      type,\n      inputs\n    });\n  }\n  /**\r\n   *  Creates a new **Fragment** for %%obj%%, wich can be any supported\r\n   *  ABI frgament type.\r\n   */\n  static from(obj) {\n    if (typeof obj === \"string\") {\n      // Try parsing JSON...\n      try {\n        Fragment.from(JSON.parse(obj));\n      } catch (e) {}\n      // ...otherwise, use the human-readable lexer\n      return Fragment.from(lex(obj));\n    }\n    if (obj instanceof TokenString) {\n      // Human-readable ABI (already lexed)\n      const type = obj.peekKeyword(KwTypes);\n      switch (type) {\n        case \"constructor\":\n          return ConstructorFragment.from(obj);\n        case \"error\":\n          return ErrorFragment.from(obj);\n        case \"event\":\n          return EventFragment.from(obj);\n        case \"fallback\":\n        case \"receive\":\n          return FallbackFragment.from(obj);\n        case \"function\":\n          return FunctionFragment.from(obj);\n        case \"struct\":\n          return StructFragment.from(obj);\n      }\n    } else if (typeof obj === \"object\") {\n      // JSON ABI\n      switch (obj.type) {\n        case \"constructor\":\n          return ConstructorFragment.from(obj);\n        case \"error\":\n          return ErrorFragment.from(obj);\n        case \"event\":\n          return EventFragment.from(obj);\n        case \"fallback\":\n        case \"receive\":\n          return FallbackFragment.from(obj);\n        case \"function\":\n          return FunctionFragment.from(obj);\n        case \"struct\":\n          return StructFragment.from(obj);\n      }\n      assert(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n        operation: \"Fragment.from\"\n      });\n    }\n    assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n  }\n  /**\r\n   *  Returns true if %%value%% is a [[ConstructorFragment]].\r\n   */\n  static isConstructor(value) {\n    return ConstructorFragment.isFragment(value);\n  }\n  /**\r\n   *  Returns true if %%value%% is an [[ErrorFragment]].\r\n   */\n  static isError(value) {\n    return ErrorFragment.isFragment(value);\n  }\n  /**\r\n   *  Returns true if %%value%% is an [[EventFragment]].\r\n   */\n  static isEvent(value) {\n    return EventFragment.isFragment(value);\n  }\n  /**\r\n   *  Returns true if %%value%% is a [[FunctionFragment]].\r\n   */\n  static isFunction(value) {\n    return FunctionFragment.isFragment(value);\n  }\n  /**\r\n   *  Returns true if %%value%% is a [[StructFragment]].\r\n   */\n  static isStruct(value) {\n    return StructFragment.isFragment(value);\n  }\n}\n/**\r\n *  An abstract class to represent An individual fragment\r\n *  which has a name from a parse ABI.\r\n */\nexport class NamedFragment extends Fragment {\n  /**\r\n   *  The name of the fragment.\r\n   */\n  name;\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, type, name, inputs) {\n    super(guard, type, inputs);\n    assertArgument(typeof name === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n    inputs = Object.freeze(inputs.slice());\n    defineProperties(this, {\n      name\n    });\n  }\n}\nfunction joinParams(format, params) {\n  return \"(\" + params.map(p => p.format(format)).join(format === \"full\" ? \", \" : \",\") + \")\";\n}\n/**\r\n *  A Fragment which represents a //Custom Error//.\r\n */\nexport class ErrorFragment extends NamedFragment {\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, name, inputs) {\n    super(guard, \"error\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: ErrorFragmentInternal\n    });\n  }\n  /**\r\n   *  The Custom Error selector.\r\n   */\n  get selector() {\n    return id(this.format(\"sighash\")).substring(0, 10);\n  }\n  /**\r\n   *  Returns a string representation of this fragment as %%format%%.\r\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"error\",\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"error\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    return result.join(\" \");\n  }\n  /**\r\n   *  Returns a new **ErrorFragment** for %%obj%%.\r\n   */\n  static from(obj) {\n    if (ErrorFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      return ErrorFragment.from(lex(obj));\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"error\", obj);\n      const inputs = consumeParams(obj);\n      consumeEoi(obj);\n      return new ErrorFragment(_guard, name, inputs);\n    }\n    return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n  }\n  /**\r\n   *  Returns ``true`` and provides a type guard if %%value%% is an\r\n   *  **ErrorFragment**.\r\n   */\n  static isFragment(value) {\n    return value && value[internal] === ErrorFragmentInternal;\n  }\n}\n/**\r\n *  A Fragment which represents an Event.\r\n */\nexport class EventFragment extends NamedFragment {\n  /**\r\n   *  Whether this event is anonymous.\r\n   */\n  anonymous;\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, name, inputs, anonymous) {\n    super(guard, \"event\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: EventFragmentInternal\n    });\n    defineProperties(this, {\n      anonymous\n    });\n  }\n  /**\r\n   *  The Event topic hash.\r\n   */\n  get topicHash() {\n    return id(this.format(\"sighash\"));\n  }\n  /**\r\n   *  Returns a string representation of this event as %%format%%.\r\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"event\",\n        anonymous: this.anonymous,\n        name: this.name,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"event\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    if (format !== \"sighash\" && this.anonymous) {\n      result.push(\"anonymous\");\n    }\n    return result.join(\" \");\n  }\n  /**\r\n   *  Return the topic hash for an event with %%name%% and %%params%%.\r\n   */\n  static getTopicHash(name, params) {\n    params = (params || []).map(p => ParamType.from(p));\n    const fragment = new EventFragment(_guard, name, params, false);\n    return fragment.topicHash;\n  }\n  /**\r\n   *  Returns a new **EventFragment** for %%obj%%.\r\n   */\n  static from(obj) {\n    if (EventFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return EventFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"event\", obj);\n      const inputs = consumeParams(obj, true);\n      const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n      consumeEoi(obj);\n      return new EventFragment(_guard, name, inputs, anonymous);\n    }\n    return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(p => ParamType.from(p, true)) : [], !!obj.anonymous);\n  }\n  /**\r\n   *  Returns ``true`` and provides a type guard if %%value%% is an\r\n   *  **EventFragment**.\r\n   */\n  static isFragment(value) {\n    return value && value[internal] === EventFragmentInternal;\n  }\n}\n/**\r\n *  A Fragment which represents a constructor.\r\n */\nexport class ConstructorFragment extends Fragment {\n  /**\r\n   *  Whether the constructor can receive an endowment.\r\n   */\n  payable;\n  /**\r\n   *  The recommended gas limit for deployment or ``null``.\r\n   */\n  gas;\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, type, inputs, payable, gas) {\n    super(guard, type, inputs);\n    Object.defineProperty(this, internal, {\n      value: ConstructorFragmentInternal\n    });\n    defineProperties(this, {\n      payable,\n      gas\n    });\n  }\n  /**\r\n   *  Returns a string representation of this constructor as %%format%%.\r\n   */\n  format(format) {\n    assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"format(sighash)\"\n    });\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"constructor\",\n        stateMutability: this.payable ? \"payable\" : \"undefined\",\n        payable: this.payable,\n        gas: this.gas != null ? this.gas : undefined,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format)))\n      });\n    }\n    const result = [`constructor${joinParams(format, this.inputs)}`];\n    if (this.payable) {\n      result.push(\"payable\");\n    }\n    if (this.gas != null) {\n      result.push(`@${this.gas.toString()}`);\n    }\n    return result.join(\" \");\n  }\n  /**\r\n   *  Returns a new **ConstructorFragment** for %%obj%%.\r\n   */\n  static from(obj) {\n    if (ConstructorFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return ConstructorFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      consumeKeywords(obj, setify([\"constructor\"]));\n      const inputs = consumeParams(obj);\n      const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n      const gas = consumeGas(obj);\n      consumeEoi(obj);\n      return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n    }\n    return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);\n  }\n  /**\r\n   *  Returns ``true`` and provides a type guard if %%value%% is a\r\n   *  **ConstructorFragment**.\r\n   */\n  static isFragment(value) {\n    return value && value[internal] === ConstructorFragmentInternal;\n  }\n}\n/**\r\n *  A Fragment which represents a method.\r\n */\nexport class FallbackFragment extends Fragment {\n  /**\r\n   *  If the function can be sent value during invocation.\r\n   */\n  payable;\n  constructor(guard, inputs, payable) {\n    super(guard, \"fallback\", inputs);\n    Object.defineProperty(this, internal, {\n      value: FallbackFragmentInternal\n    });\n    defineProperties(this, {\n      payable\n    });\n  }\n  /**\r\n   *  Returns a string representation of this fallback as %%format%%.\r\n   */\n  format(format) {\n    const type = this.inputs.length === 0 ? \"receive\" : \"fallback\";\n    if (format === \"json\") {\n      const stateMutability = this.payable ? \"payable\" : \"nonpayable\";\n      return JSON.stringify({\n        type,\n        stateMutability\n      });\n    }\n    return `${type}()${this.payable ? \" payable\" : \"\"}`;\n  }\n  /**\r\n   *  Returns a new **FallbackFragment** for %%obj%%.\r\n   */\n  static from(obj) {\n    if (FallbackFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return FallbackFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const errorObj = obj.toString();\n      const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n      assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n      const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n      // receive()\n      if (type === \"receive\") {\n        const inputs = consumeParams(obj);\n        assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n        consumeKeywords(obj, setify([\"payable\"]));\n        consumeEoi(obj);\n        return new FallbackFragment(_guard, [], true);\n      }\n      // fallback() [payable]\n      // fallback(bytes) [payable] returns (bytes)\n      let inputs = consumeParams(obj);\n      if (inputs.length) {\n        assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map(i => i.format(\"minimal\")).join(\", \"));\n      } else {\n        inputs = [ParamType.from(\"bytes\")];\n      }\n      const mutability = consumeMutability(obj);\n      assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n      if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n        const outputs = consumeParams(obj);\n        assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map(i => i.format(\"minimal\")).join(\", \"));\n      }\n      consumeEoi(obj);\n      return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n    }\n    if (obj.type === \"receive\") {\n      return new FallbackFragment(_guard, [], true);\n    }\n    if (obj.type === \"fallback\") {\n      const inputs = [ParamType.from(\"bytes\")];\n      const payable = obj.stateMutability === \"payable\";\n      return new FallbackFragment(_guard, inputs, payable);\n    }\n    assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n  }\n  /**\r\n   *  Returns ``true`` and provides a type guard if %%value%% is a\r\n   *  **FallbackFragment**.\r\n   */\n  static isFragment(value) {\n    return value && value[internal] === FallbackFragmentInternal;\n  }\n}\n/**\r\n *  A Fragment which represents a method.\r\n */\nexport class FunctionFragment extends NamedFragment {\n  /**\r\n   *  If the function is constant (e.g. ``pure`` or ``view`` functions).\r\n   */\n  constant;\n  /**\r\n   *  The returned types for the result of calling this function.\r\n   */\n  outputs;\n  /**\r\n   *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\r\n   *  or ``pure``)\r\n   */\n  stateMutability;\n  /**\r\n   *  If the function can be sent value during invocation.\r\n   */\n  payable;\n  /**\r\n   *  The recommended gas limit to send when calling this function.\r\n   */\n  gas;\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, name, stateMutability, inputs, outputs, gas) {\n    super(guard, \"function\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: FunctionFragmentInternal\n    });\n    outputs = Object.freeze(outputs.slice());\n    const constant = stateMutability === \"view\" || stateMutability === \"pure\";\n    const payable = stateMutability === \"payable\";\n    defineProperties(this, {\n      constant,\n      gas,\n      outputs,\n      payable,\n      stateMutability\n    });\n  }\n  /**\r\n   *  The Function selector.\r\n   */\n  get selector() {\n    return id(this.format(\"sighash\")).substring(0, 10);\n  }\n  /**\r\n   *  Returns a string representation of this function as %%format%%.\r\n   */\n  format(format) {\n    if (format == null) {\n      format = \"sighash\";\n    }\n    if (format === \"json\") {\n      return JSON.stringify({\n        type: \"function\",\n        name: this.name,\n        constant: this.constant,\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas != null ? this.gas : undefined,\n        inputs: this.inputs.map(i => JSON.parse(i.format(format))),\n        outputs: this.outputs.map(o => JSON.parse(o.format(format)))\n      });\n    }\n    const result = [];\n    if (format !== \"sighash\") {\n      result.push(\"function\");\n    }\n    result.push(this.name + joinParams(format, this.inputs));\n    if (format !== \"sighash\") {\n      if (this.stateMutability !== \"nonpayable\") {\n        result.push(this.stateMutability);\n      }\n      if (this.outputs && this.outputs.length) {\n        result.push(\"returns\");\n        result.push(joinParams(format, this.outputs));\n      }\n      if (this.gas != null) {\n        result.push(`@${this.gas.toString()}`);\n      }\n    }\n    return result.join(\" \");\n  }\n  /**\r\n   *  Return the selector for a function with %%name%% and %%params%%.\r\n   */\n  static getSelector(name, params) {\n    params = (params || []).map(p => ParamType.from(p));\n    const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n    return fragment.selector;\n  }\n  /**\r\n   *  Returns a new **FunctionFragment** for %%obj%%.\r\n   */\n  static from(obj) {\n    if (FunctionFragment.isFragment(obj)) {\n      return obj;\n    }\n    if (typeof obj === \"string\") {\n      try {\n        return FunctionFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"function\", obj);\n      const inputs = consumeParams(obj);\n      const mutability = consumeMutability(obj);\n      let outputs = [];\n      if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n        outputs = consumeParams(obj);\n      }\n      const gas = consumeGas(obj);\n      consumeEoi(obj);\n      return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n    }\n    let stateMutability = obj.stateMutability;\n    // Use legacy Solidity ABI logic if stateMutability is missing\n    if (stateMutability == null) {\n      stateMutability = \"payable\";\n      if (typeof obj.constant === \"boolean\") {\n        stateMutability = \"view\";\n        if (!obj.constant) {\n          stateMutability = \"payable\";\n          if (typeof obj.payable === \"boolean\" && !obj.payable) {\n            stateMutability = \"nonpayable\";\n          }\n        }\n      } else if (typeof obj.payable === \"boolean\" && !obj.payable) {\n        stateMutability = \"nonpayable\";\n      }\n    }\n    // @TODO: verifyState for stateMutability (e.g. throw if\n    //        payable: false but stateMutability is \"nonpayable\")\n    return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);\n  }\n  /**\r\n   *  Returns ``true`` and provides a type guard if %%value%% is a\r\n   *  **FunctionFragment**.\r\n   */\n  static isFragment(value) {\n    return value && value[internal] === FunctionFragmentInternal;\n  }\n}\n/**\r\n *  A Fragment which represents a structure.\r\n */\nexport class StructFragment extends NamedFragment {\n  /**\r\n   *  @private\r\n   */\n  constructor(guard, name, inputs) {\n    super(guard, \"struct\", name, inputs);\n    Object.defineProperty(this, internal, {\n      value: StructFragmentInternal\n    });\n  }\n  /**\r\n   *  Returns a string representation of this struct as %%format%%.\r\n   */\n  format() {\n    throw new Error(\"@TODO\");\n  }\n  /**\r\n   *  Returns a new **StructFragment** for %%obj%%.\r\n   */\n  static from(obj) {\n    if (typeof obj === \"string\") {\n      try {\n        return StructFragment.from(lex(obj));\n      } catch (error) {\n        assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n      }\n    } else if (obj instanceof TokenString) {\n      const name = consumeName(\"struct\", obj);\n      const inputs = consumeParams(obj);\n      consumeEoi(obj);\n      return new StructFragment(_guard, name, inputs);\n    }\n    return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n  }\n  // @TODO: fix this return type\n  /**\r\n   *  Returns ``true`` and provides a type guard if %%value%% is a\r\n   *  **StructFragment**.\r\n   */\n  static isFragment(value) {\n    return value && value[internal] === StructFragmentInternal;\n  }\n}","map":{"version":3,"names":["defineProperties","getBigInt","getNumber","assert","assertPrivate","assertArgument","id","setify","items","result","Set","forEach","k","add","Object","freeze","_kwVisibDeploy","KwVisibDeploy","split","_kwVisib","KwVisib","_kwTypes","KwTypes","_kwModifiers","KwModifiers","_kwOther","_keywords","join","Keywords","SimpleTokens","regexWhitespacePrefix","RegExp","regexNumberPrefix","regexIdPrefix","regexId","regexType","TokenString","offset","tokens","length","constructor","slice","clone","reset","subTokenString","#subTokenString","from","arguments","undefined","to","map","t","assign","match","linkBack","linkNext","popKeyword","allowed","top","peek","type","has","text","Error","pop","popType","JSON","stringify","popParen","popParams","link","push","peekKeyword","peekType","toString","i","token","lex","throwError","message","brackets","commas","cur","substring","depth","value","suffix","allowSingle","set","included","key","keys","consumeName","keyword","consumeKeywords","keywords","consumeMutability","modifiers","consumeParams","allowIndexed","ParamType","consumeGas","consumeEoi","regexArrayType","verifyBasicType","parseInt","size","_guard","internal","Symbol","for","ParamTypeInternal","ErrorFragmentInternal","EventFragmentInternal","ConstructorFragmentInternal","FallbackFragmentInternal","FunctionFragmentInternal","StructFragmentInternal","name","baseType","indexed","components","arrayLength","arrayChildren","guard","defineProperty","format","isArray","parse","String","isTuple","c","comp","isIndexable","walk","process","Array","_this","v","walkAsync","#walkAsync","promises","setValue","childType","index","param","then","Promise","all","obj","isParamType","error","comps","bracket","arrayMatch","startsWith","tuple","Fragment","inputs","e","ConstructorFragment","ErrorFragment","EventFragment","FallbackFragment","FunctionFragment","StructFragment","operation","isConstructor","isFragment","isError","isEvent","isFunction","isStruct","NamedFragment","joinParams","params","p","selector","input","anonymous","topicHash","getTopicHash","fragment","payable","gas","stateMutability","errorObj","topIsValid","mutability","outputs","constant","o","getSelector"],"sources":["C:\\Users\\ASUS\\OneDrive\\Desktop\\PEDALS  UP\\Cryptolet\\cryptolet\\node_modules\\ethers\\src.ts\\abi\\fragments.ts"],"sourcesContent":["/**\r\n *  A fragment is a single item from an ABI, which may represent any of:\r\n *\r\n *  - [Functions](FunctionFragment)\r\n *  - [Events](EventFragment)\r\n *  - [Constructors](ConstructorFragment)\r\n *  - Custom [Errors](ErrorFragment)\r\n *  - [Fallback or Receive](FallbackFragment) functions\r\n *\r\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\r\n */\r\n\r\nimport {\r\n    defineProperties, getBigInt, getNumber,\r\n    assert, assertPrivate, assertArgument\r\n} from \"../utils/index.js\";\r\nimport { id } from \"../hash/index.js\";\r\n\r\n/**\r\n *  A Type description in a [JSON ABI format](link-solc-jsonabi).\r\n */\r\nexport interface JsonFragmentType {\r\n    /**\r\n     *  The parameter name.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     *  If the parameter is indexed.\r\n     */\r\n    readonly indexed?: boolean;\r\n\r\n    /**\r\n     *  The type of the parameter.\r\n     */\r\n    readonly type?: string;\r\n\r\n    /**\r\n     *  The internal Solidity type.\r\n     */\r\n    readonly internalType?: string;\r\n\r\n    /**\r\n     *  The components for a tuple.\r\n     */\r\n    readonly components?: ReadonlyArray<JsonFragmentType>;\r\n}\r\n\r\n/**\r\n *  A fragment for a method, event or error in a [JSON ABI format](link-solc-jsonabi).\r\n */\r\nexport interface JsonFragment {\r\n    /**\r\n     *  The name of the error, event, function, etc.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     *  The type of the fragment (e.g. ``event``, ``\"function\"``, etc.)\r\n     */\r\n    readonly type?: string;\r\n\r\n    /**\r\n     *  If the event is anonymous.\r\n     */\r\n    readonly anonymous?: boolean;\r\n\r\n    /**\r\n     *  If the function is payable.\r\n     */\r\n    readonly payable?: boolean;\r\n\r\n    /**\r\n     *  If the function is constant.\r\n     */\r\n    readonly constant?: boolean;\r\n\r\n    /**\r\n     *  The mutability state of the function.\r\n     */\r\n    readonly stateMutability?: string;\r\n\r\n    /**\r\n     *  The input parameters.\r\n     */\r\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\r\n\r\n    /**\r\n     *  The output parameters.\r\n     */\r\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\r\n\r\n    /**\r\n     *  The gas limit to use when sending a transaction for this function.\r\n     */\r\n    readonly gas?: string;\r\n};\r\n\r\n/**\r\n *  The format to serialize the output as.\r\n *\r\n *  **``\"sighash\"``** - the bare formatting, used to compute the selector\r\n *  or topic hash; this format cannot be reversed (as it discards ``indexed``)\r\n *  so cannot by used to export an [[Interface]].\r\n *\r\n *  **``\"minimal\"``** - Human-Readable ABI with minimal spacing and without\r\n *  names, so it is compact, but will result in Result objects that cannot\r\n *  be accessed by name.\r\n *\r\n *  **``\"full\"``** - Full Human-Readable ABI, with readable spacing and names\r\n *  intact; this is generally the recommended format.\r\n *\r\n *  **``\"json\"``** - The [JSON ABI format](link-solc-jsonabi).\r\n */\r\nexport type FormatType = \"sighash\" | \"minimal\" | \"full\" | \"json\";\r\n\r\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\r\nfunction setify(items: Array<string>): ReadonlySet<string> {\r\n    const result: Set<string> = new Set();\r\n    items.forEach((k) => result.add(k));\r\n    return Object.freeze(result);\r\n}\r\n\r\nconst _kwVisibDeploy = \"external public payable override\";\r\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\r\n\r\n// Visibility Keywords\r\nconst _kwVisib = \"constant external internal payable private public pure view override\";\r\nconst KwVisib = setify(_kwVisib.split(\" \"));\r\n\r\nconst _kwTypes = \"constructor error event fallback function receive struct\";\r\nconst KwTypes = setify(_kwTypes.split(\" \"));\r\n\r\nconst _kwModifiers = \"calldata memory storage payable indexed\";\r\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\r\n\r\nconst _kwOther = \"tuple returns\";\r\n\r\n// All Keywords\r\nconst _keywords = [ _kwTypes, _kwModifiers, _kwOther, _kwVisib ].join(\" \");\r\nconst Keywords = setify(_keywords.split(\" \"));\r\n\r\n// Single character tokens\r\nconst SimpleTokens: Record<string, string> = {\r\n  \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\r\n  \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\r\n  \",\": \"COMMA\", \"@\": \"AT\"\r\n};\r\n\r\n// Parser regexes to consume the next token\r\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\r\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\r\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\r\n\r\n// Parser regexs to check validity\r\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\r\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\r\n\r\n/**\r\n *  @ignore:\r\n */\r\ntype Token = Readonly<{\r\n    // Type of token (e.g. TYPE, KEYWORD, NUMBER, etc)\r\n    type: string;\r\n\r\n    // Offset into the original source code\r\n    offset: number;\r\n\r\n    // Actual text content of the token\r\n    text: string;\r\n\r\n    // The parenthesis depth\r\n    depth: number;\r\n\r\n    // If a parenthesis, the offset (in tokens) that balances it\r\n    match: number;\r\n\r\n    // For parenthesis and commas, the offset (in tokens) to the\r\n    // previous/next parenthesis or comma in the list\r\n    linkBack: number;\r\n    linkNext: number;\r\n\r\n    // If a BRACKET, the value inside\r\n    value: number;\r\n}>;\r\n\r\nclass TokenString {\r\n    #offset: number;\r\n    #tokens: ReadonlyArray<Token>;\r\n\r\n    get offset(): number { return this.#offset; }\r\n    get length(): number { return this.#tokens.length - this.#offset; }\r\n\r\n    constructor(tokens: ReadonlyArray<Token>) {\r\n        this.#offset = 0;\r\n        this.#tokens = tokens.slice();\r\n    }\r\n\r\n    clone(): TokenString { return new TokenString(this.#tokens); }\r\n    reset(): void { this.#offset = 0; }\r\n\r\n    #subTokenString(from: number = 0, to: number = 0): TokenString {\r\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\r\n            return Object.freeze(Object.assign({ }, t, {\r\n                match: (t.match - from),\r\n                linkBack: (t.linkBack - from),\r\n                linkNext: (t.linkNext - from),\r\n            }));\r\n        }));\r\n    }\r\n\r\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\r\n    popKeyword(allowed: ReadonlySet<string>): string {\r\n        const top = this.peek();\r\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) { throw new Error(`expected keyword ${ top.text }`); }\r\n        return this.pop().text;\r\n    }\r\n\r\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\r\n    popType(type: string): string {\r\n        if (this.peek().type !== type) {\r\n            const top = this.peek();\r\n            throw new Error(`expected ${ type }; got ${ top.type } ${ JSON.stringify(top.text) }`);\r\n        }\r\n        return this.pop().text;\r\n    }\r\n\r\n    // Pops and returns a \"(\" TOKENS \")\"\r\n    popParen(): TokenString {\r\n        const top = this.peek();\r\n        if (top.type !== \"OPEN_PAREN\") { throw new Error(\"bad start\"); }\r\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\r\n        this.#offset = top.match + 1;\r\n        return result;\r\n    }\r\n\r\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\r\n    popParams(): Array<TokenString> {\r\n        const top = this.peek();\r\n\r\n        if (top.type !== \"OPEN_PAREN\") { throw new Error(\"bad start\"); }\r\n\r\n        const result: Array<TokenString> = [ ];\r\n\r\n        while(this.#offset < top.match - 1) {\r\n            const link = this.peek().linkNext;\r\n            result.push(this.#subTokenString(this.#offset + 1, link));\r\n            this.#offset = link;\r\n        }\r\n\r\n        this.#offset = top.match + 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    // Returns the top Token, throwing if out of tokens\r\n    peek(): Token {\r\n        if (this.#offset >= this.#tokens.length) {\r\n            throw new Error(\"out-of-bounds\");\r\n        }\r\n        return this.#tokens[this.#offset];\r\n    }\r\n\r\n    // Returns the next value, if it is a keyword in `allowed`\r\n    peekKeyword(allowed: ReadonlySet<string>): null | string {\r\n        const top = this.peekType(\"KEYWORD\");\r\n        return (top != null && allowed.has(top)) ? top: null;\r\n    }\r\n\r\n    // Returns the value of the next token if it is `type`\r\n    peekType(type: string): null | string {\r\n        if (this.length === 0) { return null; }\r\n        const top = this.peek();\r\n        return (top.type === type) ? top.text: null;\r\n    }\r\n\r\n    // Returns the next token; throws if out of tokens\r\n    pop(): Token {\r\n        const result = this.peek();\r\n        this.#offset++;\r\n        return result;\r\n    }\r\n\r\n    toString(): string {\r\n        const tokens: Array<string> = [ ];\r\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\r\n            const token = this.#tokens[i];\r\n            tokens.push(`${ token.type }:${ token.text }`);\r\n        }\r\n        return `<TokenString ${ tokens.join(\" \") }>`\r\n    }\r\n}\r\n\r\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\r\n\r\nfunction lex(text: string): TokenString {\r\n    const tokens: Array<Token> = [ ];\r\n\r\n    const throwError = (message: string) => {\r\n        const token = (offset < text.length) ? JSON.stringify(text[offset]): \"$EOI\";\r\n        throw new Error(`invalid token ${ token } at ${ offset }: ${ message }`);\r\n    };\r\n\r\n    let brackets: Array<number> = [ ];\r\n    let commas: Array<number> = [ ];\r\n\r\n    let offset = 0;\r\n    while (offset < text.length) {\r\n\r\n        // Strip off any leading whitespace\r\n        let cur = text.substring(offset);\r\n        let match = cur.match(regexWhitespacePrefix);\r\n        if (match) {\r\n            offset += match[1].length;\r\n            cur = text.substring(offset);\r\n        }\r\n\r\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\r\n        tokens.push(token);\r\n\r\n        let type = (SimpleTokens[cur[0]] || \"\");\r\n        if (type) {\r\n            token.type = type;\r\n            token.text = cur[0];\r\n            offset++;\r\n\r\n            if (type === \"OPEN_PAREN\") {\r\n                brackets.push(tokens.length - 1);\r\n                commas.push(tokens.length - 1);\r\n\r\n            } else if (type == \"CLOSE_PAREN\") {\r\n                if (brackets.length === 0) { throwError(\"no matching open bracket\"); }\r\n\r\n                token.match = brackets.pop() as number;\r\n                (<Writeable<Token>>(tokens[token.match])).match = tokens.length - 1;\r\n                token.depth--;\r\n\r\n                token.linkBack = commas.pop() as number;\r\n                (<Writeable<Token>>(tokens[token.linkBack])).linkNext = tokens.length - 1;\r\n\r\n            } else if (type === \"COMMA\") {\r\n                token.linkBack = commas.pop() as number;\r\n                (<Writeable<Token>>(tokens[token.linkBack])).linkNext = tokens.length - 1;\r\n                commas.push(tokens.length - 1);\r\n\r\n            } else if (type === \"OPEN_BRACKET\") {\r\n                token.type = \"BRACKET\";\r\n\r\n            } else if (type === \"CLOSE_BRACKET\") {\r\n                // Remove the CLOSE_BRACKET\r\n                let suffix = (tokens.pop() as Token).text;\r\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\r\n                    const value = (tokens.pop() as Token).text;\r\n                    suffix = value + suffix;\r\n                    (<Writeable<Token>>(tokens[tokens.length - 1])).value = getNumber(value);\r\n                }\r\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\r\n                    throw new Error(\"missing opening bracket\");\r\n                }\r\n                (<Writeable<Token>>(tokens[tokens.length - 1])).text += suffix;\r\n            }\r\n\r\n            continue;\r\n        }\r\n\r\n        match = cur.match(regexIdPrefix);\r\n        if (match) {\r\n            token.text = match[1];\r\n            offset += token.text.length;\r\n\r\n            if (Keywords.has(token.text)) {\r\n                token.type = \"KEYWORD\";\r\n                continue;\r\n            }\r\n\r\n            if (token.text.match(regexType)) {\r\n                token.type = \"TYPE\";\r\n                continue;\r\n            }\r\n\r\n            token.type = \"ID\";\r\n            continue;\r\n        }\r\n\r\n        match = cur.match(regexNumberPrefix);\r\n        if (match) {\r\n            token.text = match[1];\r\n            token.type = \"NUMBER\";\r\n            offset += token.text.length;\r\n            continue;\r\n        }\r\n\r\n        throw new Error(`unexpected token ${ JSON.stringify(cur[0]) } at position ${ offset }`);\r\n    }\r\n\r\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\r\n}\r\n\r\n// Check only one of `allowed` is in `set`\r\nfunction allowSingle(set: ReadonlySet<string>, allowed: ReadonlySet<string>): void {\r\n    let included: Array<string> = [ ];\r\n    for (const key in allowed.keys()) {\r\n        if (set.has(key)) { included.push(key); }\r\n    }\r\n    if (included.length > 1) { throw new Error(`conflicting types: ${ included.join(\", \") }`); }\r\n}\r\n\r\n// Functions to process a Solidity Signature TokenString from left-to-right for...\r\n\r\n// ...the name with an optional type, returning the name\r\nfunction consumeName(type: string, tokens: TokenString): string {\r\n    if (tokens.peekKeyword(KwTypes)) {\r\n        const keyword = tokens.pop().text;\r\n        if (keyword !== type) {\r\n            throw new Error(`expected ${ type }, got ${ keyword }`);\r\n        }\r\n    }\r\n\r\n    return tokens.popType(\"ID\");\r\n}\r\n\r\n// ...all keywords matching allowed, returning the keywords\r\nfunction consumeKeywords(tokens: TokenString, allowed?: ReadonlySet<string>): ReadonlySet<string> {\r\n    const keywords: Set<string> = new Set();\r\n    while (true) {\r\n        const keyword = tokens.peekType(\"KEYWORD\");\r\n\r\n        if (keyword == null || (allowed && !allowed.has(keyword))) { break; }\r\n        tokens.pop();\r\n\r\n        if (keywords.has(keyword)) { throw new Error(`duplicate keywords: ${ JSON.stringify(keyword) }`); }\r\n        keywords.add(keyword);\r\n    }\r\n\r\n    return Object.freeze(keywords);\r\n}\r\n\r\n// ...all visibility keywords, returning the coalesced mutability\r\nfunction consumeMutability(tokens: TokenString): \"payable\" | \"nonpayable\" | \"view\" | \"pure\" {\r\n    let modifiers = consumeKeywords(tokens, KwVisib);\r\n\r\n    // Detect conflicting modifiers\r\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\r\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\r\n\r\n    // Process mutability states\r\n    if (modifiers.has(\"view\")) { return \"view\"; }\r\n    if (modifiers.has(\"pure\")) { return \"pure\"; }\r\n    if (modifiers.has(\"payable\")) { return \"payable\"; }\r\n    if (modifiers.has(\"nonpayable\")) { return \"nonpayable\"; }\r\n\r\n    // Process legacy `constant` last\r\n    if (modifiers.has(\"constant\")) { return \"view\"; }\r\n\r\n    return \"nonpayable\";\r\n}\r\n\r\n// ...a parameter list, returning the ParamType list\r\nfunction consumeParams(tokens: TokenString, allowIndexed?: boolean): Array<ParamType> {\r\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\r\n}\r\n\r\n// ...a gas limit, returning a BigNumber or null if none\r\nfunction consumeGas(tokens: TokenString): null | bigint {\r\n    if (tokens.peekType(\"AT\")) {\r\n        tokens.pop();\r\n        if (tokens.peekType(\"NUMBER\")) {\r\n            return getBigInt(tokens.pop().text);\r\n        }\r\n        throw new Error(\"invalid gas\");\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction consumeEoi(tokens: TokenString): void {\r\n    if (tokens.length) {\r\n        throw new Error(`unexpected tokens at offset ${ tokens.offset }: ${ tokens.toString() }`);\r\n    }\r\n}\r\n\r\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\r\n\r\nfunction verifyBasicType(type: string): string {\r\n    const match = type.match(regexType);\r\n    assertArgument(match, \"invalid type\", \"type\", type);\r\n    if (type === \"uint\") { return \"uint256\"; }\r\n    if (type === \"int\") { return \"int256\"; }\r\n\r\n    if (match[2]) {\r\n        // bytesXX\r\n        const length = parseInt(match[2]);\r\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\r\n\r\n    } else if (match[3]) {\r\n        // intXX or uintXX\r\n        const size = parseInt(match[3] as string);\r\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\r\n    }\r\n\r\n    return type;\r\n}\r\n\r\n// Make the Fragment constructors effectively private\r\nconst _guard = { };\r\n\r\n\r\n/**\r\n *  When [walking](ParamType-walk) a [[ParamType]], this is called\r\n *  on each component.\r\n */\r\nexport type ParamTypeWalkFunc = (type: string, value: any) => any;\r\n\r\n/**\r\n *  When [walking asynchronously](ParamType-walkAsync) a [[ParamType]],\r\n *  this is called on each component.\r\n */\r\nexport type ParamTypeWalkAsyncFunc = (type: string, value: any) => any | Promise<any>;\r\n\r\nconst internal = Symbol.for(\"_ethers_internal\");\r\n\r\nconst ParamTypeInternal = \"_ParamTypeInternal\";\r\nconst ErrorFragmentInternal = \"_ErrorInternal\";\r\nconst EventFragmentInternal = \"_EventInternal\";\r\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\r\nconst FallbackFragmentInternal = \"_FallbackInternal\";\r\nconst FunctionFragmentInternal = \"_FunctionInternal\";\r\nconst StructFragmentInternal = \"_StructInternal\";\r\n\r\n/**\r\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\r\n */\r\nexport class ParamType {\r\n\r\n    /**\r\n     *  The local name of the parameter (or ``\"\"`` if unbound)\r\n     */\r\n    readonly name!: string;\r\n\r\n    /**\r\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\r\n     *  ``\"uint256[3][]\"``)\r\n     */\r\n    readonly type!: string;\r\n\r\n    /**\r\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\r\n     */\r\n    readonly baseType!: string;\r\n\r\n    /**\r\n     *  True if the parameters is indexed.\r\n     *\r\n     *  For non-indexable types this is ``null``.\r\n     */\r\n    readonly indexed!: null | boolean;\r\n\r\n    /**\r\n     *  The components for the tuple.\r\n     *\r\n     *  For non-tuple types this is ``null``.\r\n     */\r\n    readonly components!: null | ReadonlyArray<ParamType>;\r\n\r\n    /**\r\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\r\n     *\r\n     *  For non-array types this is ``null``.\r\n     */\r\n    readonly arrayLength!: null | number;\r\n\r\n    /**\r\n     *  The type of each child in the array.\r\n     *\r\n     *  For non-array types this is ``null``.\r\n     */\r\n    readonly arrayChildren!: null | ParamType;\r\n\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, name: string, type: string, baseType: string, indexed: null | boolean, components: null | ReadonlyArray<ParamType>, arrayLength: null | number, arrayChildren: null | ParamType) {\r\n        assertPrivate(guard, _guard, \"ParamType\");\r\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\r\n\r\n        if (components) { components = Object.freeze(components.slice()); }\r\n\r\n        if (baseType === \"array\") {\r\n            if (arrayLength == null || arrayChildren == null) {\r\n                throw new Error(\"\");\r\n            }\r\n        } else if (arrayLength != null || arrayChildren != null) {\r\n            throw new Error(\"\");\r\n        }\r\n\r\n        if (baseType === \"tuple\") {\r\n            if (components == null) { throw new Error(\"\"); }\r\n        } else if (components != null) {\r\n            throw new Error(\"\");\r\n        }\r\n\r\n        defineProperties<ParamType>(this, {\r\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Return a string representation of this type.\r\n     *\r\n     *  For example,\r\n     *\r\n     *  ``sighash\" => \"(uint256,address)\"``\r\n     *\r\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\r\n     *\r\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\r\n     */\r\n    format(format?: FormatType): string {\r\n        if (format == null) { format = \"sighash\"; }\r\n        if (format === \"json\") {\r\n            const name = this.name || \"\";\r\n\r\n            if (this.isArray()) {\r\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\r\n                result.name = name;\r\n                result.type += `[${ (this.arrayLength < 0 ? \"\": String(this.arrayLength)) }]`;\r\n                return JSON.stringify(result);\r\n            }\r\n\r\n            const result: any = {\r\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\r\n                name\r\n            };\r\n\r\n\r\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\r\n            if (this.isTuple()) {\r\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\r\n            }\r\n            return JSON.stringify(result);\r\n        }\r\n\r\n        let result = \"\";\r\n\r\n        // Array\r\n        if (this.isArray()) {\r\n            result += this.arrayChildren.format(format);\r\n            result += `[${ (this.arrayLength < 0 ? \"\": String(this.arrayLength)) }]`;\r\n        } else {\r\n            if (this.isTuple()) {\r\n                result += \"(\" + this.components.map(\r\n                    (comp) => comp.format(format)\r\n                ).join((format === \"full\") ? \", \": \",\") + \")\";\r\n            } else {\r\n                result += this.type;\r\n            }\r\n        }\r\n\r\n        if (format !== \"sighash\") {\r\n            if (this.indexed === true) { result += \" indexed\"; }\r\n            if (format === \"full\" && this.name) {\r\n                result += \" \" + this.name;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%this%% is an Array type.\r\n     *\r\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\r\n     *  and [[arrayLength]] are non-null.\r\n     */\r\n    isArray(): this is (ParamType & { arrayChildren: ParamType, arrayLength: number }) {\r\n        return (this.baseType === \"array\")\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%this%% is a Tuple type.\r\n     *\r\n     *  This provides a type gaurd ensuring that [[components]]\r\n     *  is non-null.\r\n     */\r\n    isTuple(): this is (ParamType & { components: ReadonlyArray<ParamType> }) {\r\n        return (this.baseType === \"tuple\");\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%this%% is an Indexable type.\r\n     *\r\n     *  This provides a type gaurd ensuring that [[indexed]]\r\n     *  is non-null.\r\n     */\r\n    isIndexable(): this is (ParamType & { indexed: boolean }) {\r\n        return (this.indexed != null);\r\n    }\r\n\r\n    /**\r\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\r\n     *  on each type, destructing the %%value%% recursively.\r\n     */\r\n    walk(value: any, process: ParamTypeWalkFunc): any {\r\n        if (this.isArray()) {\r\n            if (!Array.isArray(value)) { throw new Error(\"invalid array value\"); }\r\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            const _this = this;\r\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\r\n        }\r\n\r\n        if (this.isTuple()) {\r\n            if (!Array.isArray(value)) { throw new Error(\"invalid tuple value\"); }\r\n            if (value.length !== this.components.length) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            const _this = this;\r\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\r\n        }\r\n\r\n        return process(this.type, value);\r\n    }\r\n\r\n    #walkAsync(promises: Array<Promise<void>>, value: any, process: ParamTypeWalkAsyncFunc, setValue: (value: any) => void): void {\r\n\r\n        if (this.isArray()) {\r\n            if (!Array.isArray(value)) { throw new Error(\"invalid array value\"); }\r\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n            const childType = this.arrayChildren;\r\n\r\n            const result = value.slice();\r\n            result.forEach((value, index) => {\r\n                childType.#walkAsync(promises, value, process, (value: any) => {\r\n                    result[index] = value;\r\n                });\r\n            });\r\n            setValue(result);\r\n            return;\r\n        }\r\n\r\n        if (this.isTuple()) {\r\n            const components = this.components;\r\n\r\n            // Convert the object into an array\r\n            let result: Array<any>;\r\n            if (Array.isArray(value)) {\r\n                result = value.slice();\r\n\r\n            } else {\r\n                if (value == null || typeof(value) !== \"object\") {\r\n                    throw new Error(\"invalid tuple value\");\r\n                }\r\n\r\n                result = components.map((param) => {\r\n                    if (!param.name) { throw new Error(\"cannot use object value with unnamed components\"); }\r\n                    if (!(param.name in value)) {\r\n                        throw new Error(`missing value for component ${ param.name }`);\r\n                    }\r\n                    return value[param.name];\r\n                });\r\n            }\r\n\r\n            if (result.length !== this.components.length) {\r\n                throw new Error(\"array is wrong length\");\r\n            }\r\n\r\n            result.forEach((value, index) => {\r\n                components[index].#walkAsync(promises, value, process, (value: any) => {\r\n                    result[index] = value;\r\n                });\r\n            });\r\n            setValue(result);\r\n            return;\r\n        }\r\n\r\n        const result = process(this.type, value);\r\n        if (result.then) {\r\n            promises.push((async function() { setValue(await result); })());\r\n        } else {\r\n            setValue(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\r\n     *  %%process%% on each type, destructing the %%value%% recursively.\r\n     *\r\n     *  This can be used to resolve ENS names by walking and resolving each\r\n     *  ``\"address\"`` type.\r\n     */\r\n    async walkAsync(value: any, process: ParamTypeWalkAsyncFunc): Promise<any> {\r\n        const promises: Array<Promise<void>> = [ ];\r\n        const result: [ any ] = [ value ];\r\n        this.#walkAsync(promises, value, process, (value: any) => {\r\n            result[0] = value;\r\n        });\r\n        if (promises.length) { await Promise.all(promises); }\r\n        return result[0];\r\n    }\r\n\r\n    /**\r\n     *  Creates a new **ParamType** for %%obj%%.\r\n     *\r\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\r\n     *  otherwise the ``indexed`` keyword will throw an error.\r\n     */\r\n    static from(obj: any, allowIndexed?: boolean): ParamType {\r\n        if (ParamType.isParamType(obj)) { return obj; }\r\n\r\n        if (typeof(obj) === \"string\") {\r\n            try {\r\n                return ParamType.from(lex(obj), allowIndexed);\r\n            } catch (error) {\r\n                assertArgument(false, \"invalid param type\", \"obj\", obj);\r\n            }\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            let type = \"\", baseType = \"\";\r\n            let comps: null | Array<ParamType> = null;\r\n\r\n            if (consumeKeywords(obj, setify([ \"tuple\" ])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\r\n                // Tuple\r\n                baseType = \"tuple\";\r\n                comps = obj.popParams().map((t) => ParamType.from(t));\r\n                type = `tuple(${ comps.map((c) => c.format()).join(\",\") })`;\r\n            } else {\r\n                // Normal\r\n                type = verifyBasicType(obj.popType(\"TYPE\"));\r\n                baseType = type;\r\n            }\r\n\r\n            // Check for Array\r\n            let arrayChildren: null | ParamType  = null;\r\n            let arrayLength: null | number = null;\r\n\r\n            while (obj.length && obj.peekType(\"BRACKET\")) {\r\n                const bracket = obj.pop(); //arrays[i];\r\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\r\n                arrayLength = bracket.value;\r\n                type += bracket.text;\r\n                baseType = \"array\";\r\n                comps = null;\r\n            }\r\n\r\n            let indexed: null | boolean = null;\r\n            const keywords = consumeKeywords(obj, KwModifiers);\r\n            if (keywords.has(\"indexed\")) {\r\n                if (!allowIndexed) { throw new Error(\"\"); }\r\n                indexed = true;\r\n            }\r\n\r\n            const name = (obj.peekType(\"ID\") ? obj.pop().text: \"\");\r\n\r\n            if (obj.length) { throw new Error(\"leftover tokens\"); }\r\n\r\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\r\n        }\r\n\r\n        const name = obj.name;\r\n        assertArgument(!name || (typeof(name) === \"string\" && name.match(regexId)),\r\n            \"invalid name\", \"obj.name\", name);\r\n\r\n        let indexed = obj.indexed;\r\n        if (indexed != null) {\r\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\r\n            indexed = !!indexed;\r\n        }\r\n\r\n        let type = obj.type;\r\n\r\n        let arrayMatch = type.match(regexArrayType);\r\n        if (arrayMatch) {\r\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\r\n            const arrayChildren = ParamType.from({\r\n                type: arrayMatch[1],\r\n                components: obj.components\r\n            });\r\n\r\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\r\n        }\r\n\r\n        if (type === \"tuple\" || type.startsWith(\"tuple(\"/* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\r\n            const comps = (obj.components != null) ? obj.components.map((c: any) => ParamType.from(c)): null;\r\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\r\n            // @TODO: use lexer to validate and normalize type\r\n            return tuple;\r\n        }\r\n\r\n        type = verifyBasicType(obj.type);\r\n\r\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%value%% is a **ParamType**.\r\n     */\r\n    static isParamType(value: any): value is ParamType {\r\n        return (value && value[internal] === ParamTypeInternal);\r\n    }\r\n}\r\n\r\n/**\r\n *  The type of a [[Fragment]].\r\n */\r\nexport type FragmentType = \"constructor\" | \"error\" | \"event\" | \"fallback\" | \"function\" | \"struct\";\r\n\r\n/**\r\n *  An abstract class to represent An individual fragment from a parse ABI.\r\n */\r\nexport abstract class Fragment {\r\n    /**\r\n     *  The type of the fragment.\r\n     */\r\n    readonly type!: FragmentType;\r\n\r\n    /**\r\n     *  The inputs for the fragment.\r\n     */\r\n    readonly inputs!: ReadonlyArray<ParamType>;\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>) {\r\n        assertPrivate(guard, _guard, \"Fragment\");\r\n        inputs = Object.freeze(inputs.slice());\r\n        defineProperties<Fragment>(this, { type, inputs });\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this fragment as %%format%%.\r\n     */\r\n    abstract format(format?: FormatType): string;\r\n\r\n    /**\r\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\r\n     *  ABI frgament type.\r\n     */\r\n    static from(obj: any): Fragment {\r\n        if (typeof(obj) === \"string\") {\r\n\r\n            // Try parsing JSON...\r\n            try {\r\n                Fragment.from(JSON.parse(obj));\r\n            } catch (e) { }\r\n\r\n            // ...otherwise, use the human-readable lexer\r\n            return Fragment.from(lex(obj));\r\n        }\r\n\r\n        if (obj instanceof TokenString) {\r\n            // Human-readable ABI (already lexed)\r\n\r\n            const type = obj.peekKeyword(KwTypes);\r\n\r\n            switch (type) {\r\n                case \"constructor\": return ConstructorFragment.from(obj);\r\n                case \"error\": return ErrorFragment.from(obj);\r\n                case \"event\": return EventFragment.from(obj);\r\n                case \"fallback\": case \"receive\":\r\n                    return FallbackFragment.from(obj);\r\n                case \"function\": return FunctionFragment.from(obj);\r\n                case \"struct\": return StructFragment.from(obj);\r\n            }\r\n\r\n        } else if (typeof(obj) === \"object\") {\r\n            // JSON ABI\r\n\r\n            switch (obj.type) {\r\n                case \"constructor\": return ConstructorFragment.from(obj);\r\n                case \"error\": return ErrorFragment.from(obj);\r\n                case \"event\": return EventFragment.from(obj);\r\n                case \"fallback\": case \"receive\":\r\n                    return FallbackFragment.from(obj);\r\n                case \"function\": return FunctionFragment.from(obj);\r\n                case \"struct\": return StructFragment.from(obj);\r\n            }\r\n\r\n            assert(false, `unsupported type: ${ obj.type }`, \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"Fragment.from\"\r\n            });\r\n        }\r\n\r\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\r\n     */\r\n    static isConstructor(value: any): value is ConstructorFragment {\r\n        return ConstructorFragment.isFragment(value);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%value%% is an [[ErrorFragment]].\r\n     */\r\n    static isError(value: any): value is ErrorFragment {\r\n        return ErrorFragment.isFragment(value);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%value%% is an [[EventFragment]].\r\n     */\r\n    static isEvent(value: any): value is EventFragment {\r\n        return EventFragment.isFragment(value);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%value%% is a [[FunctionFragment]].\r\n     */\r\n    static isFunction(value: any): value is FunctionFragment {\r\n        return FunctionFragment.isFragment(value);\r\n    }\r\n\r\n    /**\r\n     *  Returns true if %%value%% is a [[StructFragment]].\r\n     */\r\n    static isStruct(value: any): value is StructFragment {\r\n        return StructFragment.isFragment(value);\r\n    }\r\n}\r\n\r\n/**\r\n *  An abstract class to represent An individual fragment\r\n *  which has a name from a parse ABI.\r\n */\r\nexport abstract class NamedFragment extends Fragment {\r\n    /**\r\n     *  The name of the fragment.\r\n     */\r\n    readonly name!: string;\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, type: FragmentType, name: string, inputs: ReadonlyArray<ParamType>) {\r\n        super(guard, type, inputs);\r\n        assertArgument(typeof(name) === \"string\" && name.match(regexId),\r\n            \"invalid identifier\", \"name\", name);\r\n        inputs = Object.freeze(inputs.slice());\r\n        defineProperties<NamedFragment>(this, { name });\r\n    }\r\n}\r\n\r\nfunction joinParams(format: FormatType, params: ReadonlyArray<ParamType>): string { \r\n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \": \",\") + \")\";\r\n}\r\n\r\n/**\r\n *  A Fragment which represents a //Custom Error//.\r\n */\r\nexport class ErrorFragment extends NamedFragment {\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\r\n        super(guard, \"error\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\r\n    }\r\n\r\n    /**\r\n     *  The Custom Error selector.\r\n     */\r\n    get selector(): string {\r\n        return id(this.format(\"sighash\")).substring(0, 10);\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this fragment as %%format%%.\r\n     */\r\n    format(format?: FormatType): string {\r\n        if (format == null) { format = \"sighash\"; }\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"error\",\r\n                name: this.name,\r\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\r\n            });\r\n        }\r\n\r\n        const result: Array<string> = [ ];\r\n        if (format !== \"sighash\") { result.push(\"error\"); }\r\n        result.push(this.name + joinParams(format, this.inputs));\r\n        return result.join(\" \");\r\n    }\r\n\r\n    /**\r\n     *  Returns a new **ErrorFragment** for %%obj%%.\r\n     */\r\n    static from(obj: any): ErrorFragment {\r\n        if (ErrorFragment.isFragment(obj)) { return obj; }\r\n\r\n        if (typeof(obj) === \"string\") {\r\n            return ErrorFragment.from(lex(obj));\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"error\", obj);\r\n            const inputs = consumeParams(obj);\r\n            consumeEoi(obj);\r\n\r\n            return new ErrorFragment(_guard, name, inputs);\r\n        }\r\n\r\n        return new ErrorFragment(_guard, obj.name,\r\n            obj.inputs ? obj.inputs.map(ParamType.from): [ ]);\r\n    }\r\n\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is an\r\n     *  **ErrorFragment**.\r\n     */\r\n    static isFragment(value: any): value is ErrorFragment {\r\n        return (value && value[internal] === ErrorFragmentInternal);\r\n    }\r\n}\r\n\r\n/**\r\n *  A Fragment which represents an Event.\r\n */\r\nexport class EventFragment extends NamedFragment {\r\n    /**\r\n     *  Whether this event is anonymous.\r\n     */\r\n    readonly anonymous!: boolean;\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>, anonymous: boolean) {\r\n        super(guard, \"event\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\r\n        defineProperties<EventFragment>(this, { anonymous });\r\n    }\r\n\r\n    /**\r\n     *  The Event topic hash.\r\n     */\r\n    get topicHash(): string {\r\n        return id(this.format(\"sighash\"));\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this event as %%format%%.\r\n     */\r\n    format(format?: FormatType): string {\r\n        if (format == null) { format = \"sighash\"; }\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"event\",\r\n                anonymous: this.anonymous,\r\n                name: this.name,\r\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\r\n            });\r\n        }\r\n\r\n        const result: Array<string> = [ ];\r\n        if (format !== \"sighash\") { result.push(\"event\"); }\r\n        result.push(this.name + joinParams(format, this.inputs));\r\n        if (format !== \"sighash\" && this.anonymous) { result.push(\"anonymous\"); }\r\n        return result.join(\" \");\r\n    }\r\n\r\n    /**\r\n     *  Return the topic hash for an event with %%name%% and %%params%%.\r\n     */\r\n    static getTopicHash(name: string, params?: Array<any>): string {\r\n        params = (params || []).map((p) => ParamType.from(p));\r\n        const fragment = new EventFragment(_guard, name, params, false);\r\n        return fragment.topicHash;\r\n    }\r\n\r\n    /**\r\n     *  Returns a new **EventFragment** for %%obj%%.\r\n     */\r\n    static from(obj: any): EventFragment {\r\n        if (EventFragment.isFragment(obj)) { return obj; }\r\n\r\n        if (typeof(obj) === \"string\") {\r\n            try {\r\n                return EventFragment.from(lex(obj));\r\n            } catch (error) {\r\n                assertArgument(false, \"invalid event fragment\", \"obj\", obj);\r\n            }\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"event\", obj);\r\n            const inputs = consumeParams(obj, true);\r\n            const anonymous = !!consumeKeywords(obj, setify([ \"anonymous\" ])).has(\"anonymous\");\r\n            consumeEoi(obj);\r\n\r\n            return new EventFragment(_guard, name, inputs, anonymous);\r\n        }\r\n\r\n        return new EventFragment(_guard, obj.name,\r\n            obj.inputs ? obj.inputs.map((p: any) => ParamType.from(p, true)): [ ], !!obj.anonymous);\r\n    }\r\n\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is an\r\n     *  **EventFragment**.\r\n     */\r\n    static isFragment(value: any): value is EventFragment {\r\n        return (value && value[internal] === EventFragmentInternal);\r\n    }\r\n}\r\n\r\n/**\r\n *  A Fragment which represents a constructor.\r\n */\r\nexport class ConstructorFragment extends Fragment {\r\n\r\n    /**\r\n     *  Whether the constructor can receive an endowment.\r\n     */\r\n    readonly payable!: boolean;\r\n\r\n    /**\r\n     *  The recommended gas limit for deployment or ``null``.\r\n     */\r\n    readonly gas!: null | bigint;\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>, payable: boolean, gas: null | bigint) {\r\n        super(guard, type, inputs);\r\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\r\n        defineProperties<ConstructorFragment>(this, { payable, gas });\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this constructor as %%format%%.\r\n     */\r\n    format(format?: FormatType): string {\r\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\",\r\n            \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\r\n\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"constructor\",\r\n                stateMutability: (this.payable ? \"payable\": \"undefined\"),\r\n                payable: this.payable,\r\n                gas: ((this.gas != null) ? this.gas: undefined),\r\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\r\n            });\r\n        }\r\n\r\n        const result = [ `constructor${ joinParams(format, this.inputs) }` ];\r\n        if (this.payable) { result.push(\"payable\"); }\r\n        if (this.gas != null) { result.push(`@${ this.gas.toString() }`); }\r\n        return result.join(\" \");\r\n    }\r\n\r\n    /**\r\n     *  Returns a new **ConstructorFragment** for %%obj%%.\r\n     */\r\n    static from(obj: any): ConstructorFragment {\r\n        if (ConstructorFragment.isFragment(obj)) { return obj; }\r\n\r\n        if (typeof(obj) === \"string\") {\r\n            try {\r\n                return ConstructorFragment.from(lex(obj));\r\n            } catch (error) {\r\n                assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\r\n            }\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            consumeKeywords(obj, setify([ \"constructor\" ]));\r\n            const inputs = consumeParams(obj);\r\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\r\n            const gas = consumeGas(obj);\r\n            consumeEoi(obj);\r\n\r\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\r\n        }\r\n\r\n        return new ConstructorFragment(_guard, \"constructor\",\r\n            obj.inputs ? obj.inputs.map(ParamType.from): [ ],\r\n            !!obj.payable, (obj.gas != null) ? obj.gas: null);\r\n    }\r\n\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **ConstructorFragment**.\r\n     */\r\n    static isFragment(value: any): value is ConstructorFragment {\r\n        return (value && value[internal] === ConstructorFragmentInternal);\r\n    }\r\n}\r\n\r\n/**\r\n *  A Fragment which represents a method.\r\n */\r\nexport class FallbackFragment extends Fragment {\r\n\r\n    /**\r\n     *  If the function can be sent value during invocation.\r\n     */\r\n    readonly payable!: boolean;\r\n\r\n    constructor(guard: any, inputs: ReadonlyArray<ParamType>, payable: boolean) {\r\n        super(guard, \"fallback\", inputs);\r\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\r\n        defineProperties<FallbackFragment>(this, { payable });\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this fallback as %%format%%.\r\n     */\r\n    format(format?: FormatType): string {\r\n        const type = ((this.inputs.length === 0) ? \"receive\": \"fallback\");\r\n\r\n        if (format === \"json\") {\r\n            const stateMutability = (this.payable ? \"payable\": \"nonpayable\");\r\n            return JSON.stringify({ type, stateMutability });\r\n        }\r\n\r\n        return `${ type }()${ this.payable ? \" payable\": \"\" }`;\r\n    }\r\n\r\n    /**\r\n     *  Returns a new **FallbackFragment** for %%obj%%.\r\n     */\r\n    static from(obj: any): FallbackFragment {\r\n        if (FallbackFragment.isFragment(obj)) { return obj; }\r\n\r\n        if (typeof(obj) === \"string\") {\r\n            try {\r\n                return FallbackFragment.from(lex(obj));\r\n            } catch (error) {\r\n                assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\r\n            }\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            const errorObj = obj.toString();\r\n\r\n            const topIsValid = obj.peekKeyword(setify([ \"fallback\", \"receive\" ]));\r\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\r\n\r\n            const type = obj.popKeyword(setify([ \"fallback\", \"receive\" ]));\r\n\r\n            // receive()\r\n            if (type === \"receive\") {\r\n                const inputs = consumeParams(obj);\r\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\r\n                consumeKeywords(obj, setify([ \"payable\" ]));\r\n                consumeEoi(obj);\r\n                return new FallbackFragment(_guard, [ ], true);\r\n            }\r\n\r\n            // fallback() [payable]\r\n            // fallback(bytes) [payable] returns (bytes)\r\n            let inputs = consumeParams(obj);\r\n            if (inputs.length) {\r\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\",\r\n                    \"invalid fallback inputs\", \"obj.inputs\",\r\n                    inputs.map((i) => i.format(\"minimal\")).join(\", \"));\r\n            } else {\r\n                inputs = [ ParamType.from(\"bytes\") ];\r\n            }\r\n\r\n            const mutability = consumeMutability(obj);\r\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\r\n\r\n            if (consumeKeywords(obj, setify([ \"returns\" ])).has(\"returns\")) {\r\n                const outputs = consumeParams(obj);\r\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\",\r\n                    \"invalid fallback outputs\", \"obj.outputs\",\r\n                    outputs.map((i) => i.format(\"minimal\")).join(\", \"));\r\n            }\r\n\r\n            consumeEoi(obj);\r\n\r\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\r\n        }\r\n\r\n        if (obj.type === \"receive\") {\r\n            return new FallbackFragment(_guard, [ ], true);\r\n        }\r\n\r\n        if (obj.type === \"fallback\") {\r\n            const inputs = [ ParamType.from(\"bytes\") ];\r\n            const payable = (obj.stateMutability === \"payable\");\r\n            return new FallbackFragment(_guard, inputs, payable);\r\n        }\r\n\r\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\r\n    }\r\n\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **FallbackFragment**.\r\n     */\r\n    static isFragment(value: any): value is FallbackFragment {\r\n        return (value && value[internal] === FallbackFragmentInternal);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *  A Fragment which represents a method.\r\n */\r\nexport class FunctionFragment extends NamedFragment {\r\n    /**\r\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\r\n     */\r\n    readonly constant!: boolean;\r\n\r\n    /**\r\n     *  The returned types for the result of calling this function.\r\n     */\r\n    readonly outputs!: ReadonlyArray<ParamType>;\r\n\r\n    /**\r\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\r\n     *  or ``pure``)\r\n     */\r\n    readonly stateMutability!: \"payable\" | \"nonpayable\" | \"view\" | \"pure\";\r\n\r\n    /**\r\n     *  If the function can be sent value during invocation.\r\n     */\r\n    readonly payable!: boolean;\r\n\r\n    /**\r\n     *  The recommended gas limit to send when calling this function.\r\n     */\r\n    readonly gas!: null | bigint;\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, name: string, stateMutability: \"payable\" | \"nonpayable\" | \"view\" | \"pure\", inputs: ReadonlyArray<ParamType>, outputs: ReadonlyArray<ParamType>, gas: null | bigint) {\r\n        super(guard, \"function\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\r\n        outputs = Object.freeze(outputs.slice());\r\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\r\n        const payable = (stateMutability === \"payable\");\r\n        defineProperties<FunctionFragment>(this, { constant, gas, outputs, payable, stateMutability });\r\n    }\r\n\r\n    /**\r\n     *  The Function selector.\r\n     */\r\n    get selector(): string {\r\n        return id(this.format(\"sighash\")).substring(0, 10);\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this function as %%format%%.\r\n     */\r\n    format(format?: FormatType): string {\r\n        if (format == null) { format = \"sighash\"; }\r\n        if (format === \"json\") {\r\n            return JSON.stringify({\r\n                type: \"function\",\r\n                name: this.name,\r\n                constant: this.constant,\r\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\r\n                payable: this.payable,\r\n                gas: ((this.gas != null) ? this.gas: undefined),\r\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\r\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\r\n            });\r\n        }\r\n\r\n        const result: Array<string> = [];\r\n\r\n        if (format !== \"sighash\") { result.push(\"function\"); }\r\n\r\n        result.push(this.name + joinParams(format, this.inputs));\r\n\r\n        if (format !== \"sighash\") {\r\n            if (this.stateMutability !== \"nonpayable\") {\r\n                result.push(this.stateMutability);\r\n            }\r\n\r\n            if (this.outputs && this.outputs.length) {\r\n                result.push(\"returns\");\r\n                result.push(joinParams(format, this.outputs));\r\n            }\r\n\r\n            if (this.gas != null) { result.push(`@${ this.gas.toString() }`); }\r\n        }\r\n        return result.join(\" \");\r\n    }\r\n\r\n    /**\r\n     *  Return the selector for a function with %%name%% and %%params%%.\r\n     */\r\n    static getSelector(name: string, params?: Array<any>): string {\r\n        params = (params || []).map((p) => ParamType.from(p));\r\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [ ], null);\r\n        return fragment.selector;\r\n    }\r\n\r\n    /**\r\n     *  Returns a new **FunctionFragment** for %%obj%%.\r\n     */\r\n    static from(obj: any): FunctionFragment {\r\n        if (FunctionFragment.isFragment(obj)) { return obj; }\r\n\r\n        if (typeof(obj) === \"string\") {\r\n            try {\r\n                return FunctionFragment.from(lex(obj));\r\n            } catch (error) {\r\n                assertArgument(false, \"invalid function fragment\", \"obj\", obj);\r\n            }\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"function\", obj);\r\n            const inputs = consumeParams(obj);\r\n            const mutability = consumeMutability(obj);\r\n\r\n            let outputs: Array<ParamType> = [ ];\r\n            if (consumeKeywords(obj, setify([ \"returns\" ])).has(\"returns\")) {\r\n                outputs = consumeParams(obj);\r\n            }\r\n\r\n            const gas = consumeGas(obj);\r\n\r\n            consumeEoi(obj);\r\n\r\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\r\n        }\r\n\r\n        let stateMutability = obj.stateMutability;\r\n\r\n        // Use legacy Solidity ABI logic if stateMutability is missing\r\n        if (stateMutability == null) {\r\n            stateMutability = \"payable\";\r\n\r\n            if (typeof(obj.constant) === \"boolean\") {\r\n                stateMutability = \"view\";\r\n                if (!obj.constant) {\r\n                    stateMutability = \"payable\"\r\n                    if (typeof(obj.payable) === \"boolean\" && !obj.payable) {\r\n                        stateMutability = \"nonpayable\";\r\n                    }\r\n                }\r\n            } else if (typeof(obj.payable) === \"boolean\" && !obj.payable) {\r\n                stateMutability = \"nonpayable\";\r\n            }\r\n        }\r\n\r\n        // @TODO: verifyState for stateMutability (e.g. throw if\r\n        //        payable: false but stateMutability is \"nonpayable\")\r\n\r\n        return new FunctionFragment(_guard, obj.name, stateMutability,\r\n             obj.inputs ? obj.inputs.map(ParamType.from): [ ],\r\n             obj.outputs ? obj.outputs.map(ParamType.from): [ ],\r\n             (obj.gas != null) ? obj.gas: null);\r\n    }\r\n\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **FunctionFragment**.\r\n     */\r\n    static isFragment(value: any): value is FunctionFragment {\r\n        return (value && value[internal] === FunctionFragmentInternal);\r\n    }\r\n}\r\n\r\n/**\r\n *  A Fragment which represents a structure.\r\n */\r\nexport class StructFragment extends NamedFragment {\r\n\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\r\n        super(guard, \"struct\", name, inputs);\r\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\r\n    }\r\n\r\n    /**\r\n     *  Returns a string representation of this struct as %%format%%.\r\n     */\r\n    format(): string {\r\n        throw new Error(\"@TODO\");\r\n    }\r\n\r\n    /**\r\n     *  Returns a new **StructFragment** for %%obj%%.\r\n     */\r\n    static from(obj: any): StructFragment {\r\n        if (typeof(obj) === \"string\") {\r\n            try {\r\n                return StructFragment.from(lex(obj));\r\n            } catch (error) {\r\n                assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\r\n            }\r\n\r\n        } else if (obj instanceof TokenString) {\r\n            const name = consumeName(\"struct\", obj);\r\n            const inputs = consumeParams(obj);\r\n            consumeEoi(obj);\r\n            return new StructFragment(_guard, name, inputs);\r\n        }\r\n\r\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from): [ ]);\r\n    }\r\n\r\n// @TODO: fix this return type\r\n    /**\r\n     *  Returns ``true`` and provides a type guard if %%value%% is a\r\n     *  **StructFragment**.\r\n     */\r\n    static isFragment(value: any): value is FunctionFragment {\r\n        return (value && value[internal] === StructFragmentInternal);\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}